----SQL QUERIES
---SELECT
--1 Select all records from the Employee table.
SELECT * FROM CHINOOK.EMPLOYEE; 
/
--2 Select all records from the Employee table where last name is King.
SELECT * FROM CHINOOK.EMPLOYEE WHERE LASTNAME = 'King';
/
--3 Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM CHINOOK.EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
/

---ORDER BY
--1 Select all albums in Album table and sort result set in descending order by title.
SELECT * FROM CHINOOK.ALBUM ORDER BY TITLE DESC;
/
--2 Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME, CITY FROM CHINOOK.CUSTOMER ORDER BY CITY ASC; --THE INSTRUCTIONS ONLY ASKED FOR FIRSTNAME, BUT I ALSO PUT IN CITY JUST TO KEEP IT VISIBLE
/
---INSERT INTO
--1  Insert two new records into Genre table 
INSERT INTO CHINOOK.GENRE
VALUES (26, 'Lofi Hip-Hop');
INSERT INTO CHINOOK.GENRE
VALUES (27, 'Screeching Anime Love Songs');
/
--2 Insert two new records into Employee table
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME) --THE VALUES THAT CAN'T BE NULL BECUASE I'M LAZY
VALUES (9, 'Lofi', 'Hip-Hop');
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME)--''
VALUES (10, 'Screeching', 'Love-Song');
/
--3 Insert two new records into Customer table
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)--''
VALUES (60, 'Sideshow', 'Bob', 'thebartthe@spring.com');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)--''
VALUES (61, 'Itchy', 'Nscratchi', 'tracyulman@spring.com');
/
---UPDATE
--1 Update Aaron Mitchell in Customer table to Robert Walter
--SELECT * FROM CHINOOK.CUSTOMER WHERE FIRSTNAME = 'Aaron';
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME='Robert', LASTNAME='Walker'
WHERE CUSTOMERID = 32;
/
--2 Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”	
--SELECT * FROM CHINOOK.ARTIST WHERE NAME LIKE 'Cr%';
UPDATE CHINOOK.ARTIST
SET NAME='CCR'
WHERE ARTISTID = 76;
/
---LIKE Select all invoices with a billing address like “T%” 
SELECT * FROM CHINOOK.INVOICE 
WHERE BILLINGADDRESS LIKE 'T%' ORDER BY BILLINGPOSTALCODE ASC; --ADDED THE ORDER BY BECAUSE THE LIST WAS UGLY
/
---BETWEEN
--1 Select all invoices that have a total between 15 and 50
SELECT * FROM CHINOOK.INVOICE 
WHERE TOTAL BETWEEN 15 AND 50;
/
--2 Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * FROM CHINOOK.EMPLOYEE 
WHERE HIREDATE BETWEEN TO_DATE ('2003/06/01', 'yyyy/mm/dd') AND TO_DATE ('2004/03/01', 'yyyy/mm/dd');
/
---DELETE
--1 Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
SELECT * FROM CHINOOK.CUSTOMER 
WHERE FIRSTNAME='Robert' AND LASTNAME='Walker'; --MAKING SURE IT'S THE RIGHT DUDE
/

SELECT * FROM CHINOOK.INVOICE 
WHERE CUSTOMERID=32; --FINDING INVOICES WITH THIS DUDE'S CUSTOMER ID
/
SELECT * FROM CHINOOK.INVOICELINE
WHERE INVOICEID=50 OR INVOICEID=61
OR INVOICEID=116 OR INVOICEID=245
OR INVOICEID=268 OR INVOICEID=290 --FINDING DUDE'S INVOICES' INVOICE LINES
OR INVOICEID=342; --THERE'S PROBABLY A BETTER WAY TO DO THIS, BUT I'M NOT GOING TO KILL MYSELF OVER IT
/

DELETE FROM CHINOOK.INVOICELINE
WHERE INVOICEID=50 OR INVOICEID=61
OR INVOICEID=116 OR INVOICEID=245
OR INVOICEID=268 OR INVOICEID=290
OR INVOICEID=342; --DELETE DUDE'S INVOICES' INVOICE LINES
/
DELETE FROM CHINOOK.INVOICE
WHERE CUSTOMERID=32; --DELETE DUDE'S INVOICES
/
DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME='Robert' AND LASTNAME='Walker'; --DELETE DUDE
/
----SQL FUNCTIONS
---SYSTEM DEFINE FUNCTIONS
--1 Create a function that returns the current time.
--SELECT CURRENT_DATE FROM DUAL;

CREATE OR REPLACE FUNCTION DATE_SET (cd IN DATE)
RETURN DATE IS 
   ds DATE; 
BEGIN 
    ds := cd;
    RETURN ds;
END; 
/ 

DECLARE 
IN_DATE DATE;
SET_DATE DATE;
BEGIN
    IN_DATE := CURRENT_DATE;
    SET_DATE := DATE_SET(IN_DATE); --Yes, I know this is dumb. I'm sorry.
    DBMS_OUTPUT.PUT_LINE('CURRENT DATE: '||SET_DATE);
END;
/

--2 create a function that returns the length of name in MEDIATYPE table
CREATE OR REPLACE FUNCTION MEDIATYPE_NAME_LENGTH (medid IN NUMBER)--MIGHT MAKE MORE GENERAL LATER, RIGHT NOW IT WORKS
RETURN INTEGER IS 
   len INTEGER; 
BEGIN 
    SELECT LENGTH(NAME) INTO len FROM CHINOOK.MEDIATYPE WHERE MEDIATYPEID =medid;
    --len := LENGTH(str); 
    RETURN len;
END; 
/ 

DECLARE 
MED_ID NUMBER;
NAME_LEN INTEGER;
BEGIN
    --SELECT LENGTH(NAME) INTO A_NAME FROM CHINOOK.MEDIATYPE WHERE MEDIATYPEID =1;
    --A_NAME := LENGTH(CHINOOK.MEDIATYPE.NAME);
    MED_ID := 3;
    NAME_LEN := MEDIATYPE_NAME_LENGTH(MED_ID);
    DBMS_OUTPUT.PUT_LINE(MED_ID||' LENGTH: '||NAME_LEN);
END;
/

--SELECT LENGTH(NAME) INTO FROM CHINOOK.MEDIATYPE WHERE MEDIATYPEID =1;

---SYSTEM DEFINED AGGREGATE FUNCTIONS
--1 Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION INVOICES_TOTAL_AVG 
RETURN FLOAT IS
aver FLOAT;
BEGIN
    SELECT AVG(TOTAL) INTO aver FROM CHINOOK.INVOICE;
    RETURN aver;
END;
/

DECLARE
BEGIN
    DBMS_OUTPUT.PUT_LINE('AVERAGE OF ALL INVOICES: '||INVOICES_TOTAL_AVG);
END;
/
--2 Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION TRACK_UNITPRICE_MAX
RETURN NUMBER IS
maxTrack NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO maxTrack FROM CHINOOK.TRACK;
    RETURN maxTrack;
END;
/

DECLARE
BEGIN
--    SELECT NAME, MAX(UNITPRICE) AS "Max Price" FROM CHINOOK.TRACK GROUP BY NAME;
    DBMS_OUTPUT.PUT_LINE('Cost of most expensive track: '||TRACK_UNITPRICE_MAX);
END;
/

SELECT NAME, MAX(UNITPRICE) AS "Max Price" FROM CHINOOK.TRACK GROUP BY ;
/
---USER DEFINED SCALAR FUNCTIONS
--1 Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION INVOICELINES_UNITPRICE_AVG 
RETURN FLOAT IS
aver FLOAT;
BEGIN
    SELECT AVG(UNITPRICE) INTO aver FROM CHINOOK.INVOICELINE;
    RETURN aver;
END;
/

DECLARE
BEGIN
    DBMS_OUTPUT.PUT_LINE('AVERAGE OF INVOICES LINE ITEMS: '||INVOICELINES_UNITPRICE_AVG );
END;
/

---USER DEFINED TABLE VALUED FUNCTIONS
-- Create a function that returns all employees who are born after 1968.
SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-31';
/

CREATE OR REPLACE FUNCTION PRINT_YOUNG_EMPLOYEES
RETURN SYS_REFCURSOR
IS 
S SYS_REFCURSOR;
BEGIN 
    OPEN S FOR 
    SELECT FIRSTNAME, LASTNAME, BIRTHDATE FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-31';
    RETURN S;
END;
/

DECLARE 
S SYS_REFCURSOR;
SOME_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
SOME_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
SOME_BIRTHDATE CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    S := PRINT_YOUNG_EMPLOYEES;
    LOOP
        FETCH S INTO SOME_FIRSTNAME, SOME_LASTNAME, SOME_BIRTHDATE;
        EXIT WHEN S%NOTFOUND; --BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE(SOME_FIRSTNAME||' '||SOME_LASTNAME||' WAS BORN '||SOME_BIRTHDATE||'.');
    END LOOP;
    CLOSE S;
END;
/


----STORED PROCEDURES
---BASIC STORED PROCEDURE
--1 Create a stored procedure that selects the first and last names of all the employees.
--SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
--/

CREATE OR REPLACE PROCEDURE EMPLOYEES_SELECT_FULL_NAME (S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
END EMPLOYEES_SELECT_FULL_NAME;
/


DECLARE 
S SYS_REFCURSOR;
SOME_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
SOME_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    EMPLOYEES_SELECT_FULL_NAME(S);
    LOOP
        FETCH S INTO SOME_FIRSTNAME, SOME_LASTNAME;
        EXIT WHEN S%NOTFOUND; --BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE(SOME_FIRSTNAME||' '||SOME_LASTNAME);
    END LOOP;
    CLOSE S;
END;
/


---STORED PROCEDURE INPUT PARAMETERS
--1 Create a stored procedure that updates the personal information of an employee.
--CREATE OR REPLACE PROCEDURE EMPLOYEES_UPDATE_INFO (-- NOT WORKING!!!!!!!!!!!
--    E_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
--    E_FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE,
--    E_LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE,
--    E_ADD CHINOOK.EMPLOYEE.ADDRESS%TYPE, E_CITY CHINOOK.EMPLOYEE.CITY%TYPE,
--    E_STATE CHINOOK.EMPLOYEE.STATE%TYPE, E_COUNTRY CHINOOK.EMPLOYEE.COUNTRY%TYPE,
--    E_POSTAL CHINOOK.EMPLOYEE.POSTALCODE%TYPE, E_PHONE CHINOOK.EMPLOYEE.PHONE%TYPE,
--    E_FAX CHINOOK.EMPLOYEE.FAX%TYPE, E_MAIL CHINOOK.EMPLOYEE.EMAIL%TYPE
--    )
--IS dummy number(1,0);
--BEGIN
--    UPDATE CHINOOK.EMPLOYEE SET ADDRESS = E_ADD, CITY = E_CITY, STATE = E_STATE, 
--            COUNTRY = E_COUNTRY, POSTALCODE = E_POSTAL, 
--            PHONE = E_PHONE, FAX = E_FAX, EMAIL = E_MAIL
--            WHERE EMPLOYEEID = E_ID;
--END;
--/

--2 Create a stored procedure that returns the managers of an employee.

---STORED PROCEDURE OUTPUT PARAMETERS
--1 Create a stored procedure that returns the name and company of a customer.

----TRANSACTIONS
--1 Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).

----TRIGGERS
---AFTER/FOR
--1 Create an after insert trigger on the employee table fired after a new record is inserted into the table.

--2 Create an after update trigger on the album table that fires after a row is inserted in the table

--3 Create an after delete trigger on the customer table that fires after a row is deleted from the table.


----JOINS
---INNER
--1 Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT FIRSTNAME, LASTNAME, CUSTOMER.CUSTOMERID, INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
/

---OUTER
--1 Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT FIRSTNAME, LASTNAME, CUSTOMER.CUSTOMERID, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL JOIN CHINOOK.INVOICE ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID ORDER BY CUSTOMER.CUSTOMERID;
/


---RIGHT
--1 Create a right join that joins album and artist specifying artist name and title.
SELECT ARTIST.NAME, ALBUM.TITLE
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST ON ALBUM.ARTISTID=ARTIST.ARTISTID ORDER BY ARTIST.NAME;
/

---CROSS
--1 Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT ARTIST.NAME, ALBUM.TITLE
FROM CHINOOK.ALBUM
CROSS JOIN CHINOOK.ARTIST ORDER BY ARTIST.NAME ASC;
/

---SELF
--1 Perform a self-join on the employee table, joining on the reportsto column.
--SELECT A.FIRSTNAME AS CustomerName1, B.CustomerName AS CustomerName2, A.City
--FROM CHINOOK.EMPLOYEE A, CHINOOK.EMPLOYEE B
--WHERE A.REPORTSTO = B.REPORTSTO
--AND A.City = B.City 
--ORDER BY A.City;