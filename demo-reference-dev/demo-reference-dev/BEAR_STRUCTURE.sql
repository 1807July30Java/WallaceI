--TABLE CREATION
CREATE TABLE BEAR (
    BEAR_ID INTEGER PRIMARY KEY,
    BEAR_NAME VARCHAR2(100),
    BEAR_BIRTHDATE DATE,
    BEAR_WEIGHT NUMBER(5,2) DEFAULT 200.00,
    BEAR_TYPE_ID INTEGER NOT NULL,
    CAVE_ID INTEGER
);
/
CREATE TABLE BEAR_TYPE (
    BEAR_TYPE_ID INTEGER PRIMARY KEY,
    BEAR_TYPE_NAME VARCHAR2(100)
);
/
CREATE TABLE CAVE (
    CAVE_ID INTEGER PRIMARY KEY,
    CAVE_NAME VARCHAR2(100),
    MAX_BEARS INTEGER DEFAULT 4
);
/
CREATE TABLE BEEHIVE (
    BEEHIVE_ID INTEGER PRIMARY KEY,
    BEEHIVE_NAME VARCHAR2(100),
    WEIGHT NUMBER(5,2) DEFAULT 75.00
);
/
CREATE TABLE BEAR_BEEHIVE (
    BEAR_ID INTEGER,
    BEEHIVE_ID INTEGER,
    PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);
/

--FORIEGN KEY CONSTRAINTS 
ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);
/
ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);
/
ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEAR_BEEHIVE
FOREIGN KEY (BEAR_ID) REFERENCES BEAR(BEAR_ID);
/
ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEEHIVE_BEAR_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);
/

--ADD SOME DATA

INSERT INTO BEAR_TYPE VALUES (1,'Grizzly');
INSERT INTO BEAR_TYPE(BEAR_TYPE_ID,BEAR_TYPE_NAME) VALUES (2,'Sun');

INSERT ALL
INTO CAVE 
VALUES (1,'AWESOMECAVE1',9)
INTO CAVE(CAVE_ID,CAVE_NAME)
VALUES (2, 'Queens')
SELECT * FROM DUAL; --DUAL IS A DUMMY TABLE 

INSERT ALL
INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID)
VALUES (3,'Ursula',TO_DATE('1980-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 1, 2)
INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID)
VALUES (5,'Truckski',TO_DATE('1999-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 2, 2)
INTO BEAR
VALUES (8,'Maleficent',TO_DATE('1980-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 400.00, 1, 1)
SELECT * FROM DUAL;

--THIS DOES NOT WORK
--INSERT INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID)
--VALUES (9,'Ferdinand',TO_DATE('1980-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 1, 10);

INSERT ALL
INTO BEEHIVE
VALUES (1,'Honeylicious',45)
INTO BEEHIVE(BEEHIVE_ID,BEEHIVE_NAME)
VALUES (2, 'Diet Honey')
SELECT * FROM DUAL;

INSERT ALL
INTO BEAR_BEEHIVE
VALUES(5,2)
INTO BEAR_BEEHIVE
VALUES(5,1)
INTO BEAR_BEEHIVE
VALUES(8,2)
INTO BEAR_BEEHIVE
VALUES(3,1)
SELECT * FROM DUAL;

--SELECT STATEMENTS
SELECT * FROM BEAR;

INSERT INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID)
VALUES (10,'Susan',TO_DATE('1999-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 2);

INSERT INTO CAVE VALUES (42, 'Manhattan', 899);

SELECT BEAR_NAME, BEAR_BIRTHDATE FROM BEAR
WHERE CAVE_ID = 2;

--WHAT IF WE WANTED INFORMATION ABOUT THE CAVES?
SELECT B.BEAR_NAME, CAVE.CAVE_NAME
FROM BEAR B --ALIAS BEAR TABLE
LEFT JOIN CAVE ON B.CAVE_ID = CAVE.CAVE_ID;

SELECT B.BEAR_NAME, CAVE.CAVE_NAME
FROM BEAR B --ALIAS BEAR TABLE
FULL JOIN CAVE ON B.CAVE_ID = CAVE.CAVE_ID;

--CAVES WITH HEAVY BEARS?
SELECT AVG(B.BEAR_WEIGHT) FROM BEAR B GROUP BY B.CAVE_ID HAVING AVG(B.BEAR_WEIGHT) > 300;
SELECT CAVE_NAME, AVG(BEAR.BEAR_WEIGHT)
FROM CAVE
LEFT JOIN BEAR ON CAVE.CAVE_ID = BEAR.CAVE_ID
GROUP BY CAVE_NAME
HAVING AVG(BEAR.BEAR_WEIGHT) > 300;

--MORE DDL: ADD COLUMN
ALTER TABLE BEAR_TYPE ADD SURVIVAL VARCHAR (200);
/

UPDATE BEAR_TYPE SET SURVIVAL = 'play dead'
WHERE BEAR_TYPE_ID = 1;

--CREATE SEQUENCES AND TRIGGERS TO PROVIDE PK VALUES 

CREATE SEQUENCE SQ_BEAR_PK
START WITH 99
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_BEAR_TYPE_PK
START WITH 99
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_CAVE_PK
START WITH 99
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_BEEHIVE_PK
START WITH 99
INCREMENT BY 1;
/

--TRIGGERS: ACTIONS YOU CAN SPECIFY TO OCCUR BEFORE/AFTER DML OPERATIONS
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
    SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR_TYPE
BEFORE INSERT ON BEAR_TYPE
FOR EACH ROW
BEGIN
    SELECT SQ_BEAR_TYPE_PK.NEXTVAL INTO :NEW.BEAR_TYPE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BEEHIVE
BEFORE INSERT ON BEEHIVE
FOR EACH ROW
BEGIN
    SELECT SQ_BEEHIVE_PK.NEXTVAL INTO :NEW.BEEHIVE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_CAVE
BEFORE INSERT ON CAVE
FOR EACH ROW
BEGIN
    SELECT SQ_CAVE_PK.NEXTVAL INTO :NEW.CAVE_ID FROM DUAL;
END;
/

--TRY IT OUT!
INSERT INTO BEAR(BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, BEAR_WEIGHT)
VALUES ('Twosan',TO_DATE('1999-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 1, 800);
INSERT INTO BEAR(BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, BEAR_WEIGHT)
VALUES ('THREEsan',TO_DATE('1999-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 2, 800);
INSERT INTO BEAR(BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID, BEAR_WEIGHT)
VALUES ('FOURsan',TO_DATE('1999-08-08 00:00:00','yyyy-mm-dd hh24:mi:ss'), 1, 1, 800);

--VIEWS

CREATE VIEW VW_HEAVY_BEARS(CAVE, BEARWEIGHT)
AS
SELECT CAVE_NAME, AVG(BEAR.BEAR_WEIGHT)
FROM CAVE
LEFT JOIN BEAR ON CAVE.CAVE_ID = BEAR.CAVE_ID
GROUP BY CAVE_NAME
HAVING AVG(BEAR.BEAR_WEIGHT) > 300;

SELECT * FROM VW_HEAVY_BEARS;

--HOW MANY BEARS PER CAVE? 
CREATE VIEW VW_BEARS_PER_CAVE(CAVE, NUMBEAR)
AS
SELECT CAVE_NAME, COUNT(BEAR_ID) --SYSTEM-DEFINED AGGREGATE FUNCTION 
FROM BEAR, CAVE
WHERE BEAR.CAVE_ID = CAVE.CAVE_ID
GROUP BY CAVE_NAME;

SELECT * FROM VW_BEARS_PER_CAVE;

--USER-DEFINED FUNCTIONS

--SOME JAVA-LIKE FUNCTIONALITY
CREATE OR REPLACE FUNCTION FIND_MAX_NUMBER (X IN NUMBER, Y IN NUMBER)
RETURN NUMBER
IS
Z NUMBER;
BEGIN
    IF X > Y THEN
    Z := X; --PL/SQL ASSIGNMENT OPERATOR
    ELSE 
    Z := Y;
    END IF;
    RETURN Z;
END;

DECLARE 
FIRST_NUM NUMBER;
SECOND_NUM NUMBER;
MAX_NUM NUMBER;
BEGIN
    FIRST_NUM := 22;
    SECOND_NUM := 42;
    MAX_NUM := FIND_MAX_NUMBER(FIRST_NUM, SECOND_NUM);
    DBMS_OUTPUT.PUT_LINE('MAX: '||MAX_NUM);
END;

--CURSOR: POINTER TO THE 'ACTIVE REGION' 
--USE THEM TO MOVE THROUGH A RESULT SET 
CREATE OR REPLACE FUNCTION PRINT_ALL_BEARS
RETURN SYS_REFCURSOR
IS 
S SYS_REFCURSOR;
BEGIN 
    OPEN S FOR 
    SELECT BEAR_ID, BEAR_NAME FROM BEAR;
    RETURN S;
END;

DECLARE 
S SYS_REFCURSOR;
SOME_ID BEAR.BEAR_ID%TYPE; --DECLARING SOME_ID AS WHATEVER TYPE BEAR.BEAR_ID IS
SOME_NAME BEAR.BEAR_NAME%TYPE;
BEGIN
    S := PRINT_ALL_BEARS;
    LOOP
        FETCH S INTO SOME_ID, SOME_NAME;
        EXIT WHEN S%NOTFOUND; --BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE(SOME_ID||' IS CURRENT ID, '||SOME_NAME||' IS CURRENT NAME.');
    END LOOP;
    CLOSE S;
END;

--STORED PROCEDURE TO FEED BEAR

--FIRST, SOME CHECKS 
ALTER TABLE BEAR ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE
CHECK (BEAR_WEIGHT > 0);
ALTER TABLE BEEHIVE ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE
CHECK (WEIGHT > 0);

--NOW THE PROCEDURE
CREATE OR REPLACE PROCEDURE SP_FEED_BEAR(B_ID IN NUMBER, H_ID IN NUMBER, HONEY_AMT IN NUMBER, AMT_FED OUT NUMBER)
IS
BB_EXISTS INTEGER;
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    --CHECK THAT THE THIS BEAR IS CORRECTLY MATCHED TO THIS BEEHIVE
    SELECT COUNT(BB.BEAR_ID) INTO BB_EXISTS FROM BEAR_BEEHIVE BB
        WHERE BB.BEAR_ID = B_ID
        AND BB.BEEHIVE_ID = H_ID;
    DBMS_OUTPUT.PUT_LINE(BB_EXISTS);
    IF BB_EXISTS > 0 THEN
        --DECREASE BEEHIVE WEIGHT
        UPDATE BEEHIVE 
        SET WEIGHT = WEIGHT - HONEY_AMT
        WHERE BEEHIVE_ID = H_ID;
        --INCREASE BEAR WEIGHT
        UPDATE BEAR 
        SET BEAR_WEIGHT = BEAR_WEIGHT + HONEY_AMT
        WHERE BEAR_ID = B_ID;
        --RETURN SOME FEEDBACK
        DBMS_OUTPUT.PUT_LINE('FED BEAR '||HONEY_AMT||' POUNDS OF HONEY');
        AMT_FED := HONEY_AMT;
    ELSE
    DBMS_OUTPUT.PUT_LINE('FAILED TO FEED BEAR');
    AMT_FED := 0;
    END IF;
    COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FAILED TO FEED BEAR');
        --https://docs.oracle.com/cd/B10501_01/appdev.920/a96624/07_errs.htm 
        AMT_FED := 0;
        ROLLBACK;
END;

BEGIN
SP_FEED_BEAR(5,1,5);
END;
